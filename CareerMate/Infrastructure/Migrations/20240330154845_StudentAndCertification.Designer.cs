// <auto-generated />
using System;
using CareerMate.Infrastructure.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace CareerMate.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20240330154845_StudentAndCertification")]
    partial class StudentAndCertification
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("CareerMate.Models.Entities.ApplicationUsers.ApplicationUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("FirstName")
                        .HasColumnType("text");

                    b.Property<string>("LastName")
                        .HasColumnType("text");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("CareerMate.Models.Entities.ApplicationUsers.ApplicationUserRoles", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("CareerMate.Models.Entities.Certifications.Certification", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date");

                    b.Property<Guid?>("DeleteAt")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<Guid?>("StudentId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("StudentId");

                    b.ToTable("Certification", (string)null);
                });

            modelBuilder.Entity("CareerMate.Models.Entities.Companies.Company", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Address")
                        .HasColumnType("text");

                    b.Property<string>("Bio")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<Guid>("FacultyId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<int>("NumberOfStudents")
                        .HasColumnType("integer");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<int?>("Status")
                        .HasColumnType("integer");

                    b.Property<string>("WebURL")
                        .HasColumnType("text");

                    b.Property<bool>("isBlocked")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.HasKey("Id");

                    b.HasIndex("FacultyId");

                    b.ToTable("Company", (string)null);
                });

            modelBuilder.Entity("CareerMate.Models.Entities.CompanyLeaveRequests.CompanyLeaveRequest", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("Approved")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Reason")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("CompanyLeaveRequest", (string)null);
                });

            modelBuilder.Entity("CareerMate.Models.Entities.Coordinators.Coordinator", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ApplicationUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<TimeSpan?>("DeletedAt")
                        .HasColumnType("interval");

                    b.Property<Guid?>("FacultyId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<Guid?>("StudentBatchId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId")
                        .IsUnique();

                    b.HasIndex("FacultyId");

                    b.HasIndex("StudentBatchId");

                    b.ToTable("Coordinator", (string)null);
                });

            modelBuilder.Entity("CareerMate.Models.Entities.DailyDiaries.DailyDiary", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("StudentId")
                        .HasColumnType("uuid");

                    b.Property<string>("Summary")
                        .HasColumnType("text");

                    b.Property<string>("TrainingLocation")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("StudentId");

                    b.ToTable("DailyDiary", (string)null);
                });

            modelBuilder.Entity("CareerMate.Models.Entities.DailyRecords.DailyRecord", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Day")
                        .HasColumnType("integer");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<Guid>("DiaryId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("DiaryId");

                    b.ToTable("DailyRecord", (string)null);
                });

            modelBuilder.Entity("CareerMate.Models.Entities.Degrees.Degree", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("FacultyId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("ShortName")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("FacultyId");

                    b.ToTable("Degree", (string)null);
                });

            modelBuilder.Entity("CareerMate.Models.Entities.Faculties.Faculty", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ShortName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("UniversityId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UniversityId");

                    b.ToTable("Faculty", (string)null);
                });

            modelBuilder.Entity("CareerMate.Models.Entities.Industries.Industry", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("FacultyId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("FacultyId");

                    b.ToTable("Industry", (string)null);
                });

            modelBuilder.Entity("CareerMate.Models.Entities.InternshipInvites.InternshipInvite", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("InternshipId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("StudentId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("InternshipId");

                    b.HasIndex("StudentId");

                    b.ToTable("InternshipInvite", (string)null);
                });

            modelBuilder.Entity("CareerMate.Models.Entities.InternshipPosts.InternshipPost", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Address")
                        .HasColumnType("text");

                    b.Property<Guid?>("CreatedApplicationUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedUserRole")
                        .HasColumnType("text");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<byte[]>("Flyer")
                        .HasColumnType("bytea");

                    b.Property<Guid>("InternshipId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsApproved")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("NumberOfPositions")
                        .HasColumnType("integer");

                    b.Property<string>("Title")
                        .HasColumnType("text");

                    b.Property<int>("WorkPlaceType")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CreatedApplicationUserId");

                    b.HasIndex("InternshipId")
                        .IsUnique();

                    b.ToTable("InternshipPost", (string)null);
                });

            modelBuilder.Entity("CareerMate.Models.Entities.Internships.Internship", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Title")
                        .HasColumnType("text");

                    b.Property<int>("WorkPlaceType")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.ToTable("Internship", (string)null);
                });

            modelBuilder.Entity("CareerMate.Models.Entities.Pathways.Pathway", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Code")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("DegreeId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("DegreeId");

                    b.ToTable("Pathway", (string)null);
                });

            modelBuilder.Entity("CareerMate.Models.Entities.Skills.Skill", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("CompanyName")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("DeletedAt")
                        .HasColumnType("uuid");

                    b.Property<DateOnly>("From")
                        .HasColumnType("date");

                    b.Property<int>("JobType")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("StudentId")
                        .HasColumnType("uuid");

                    b.Property<string>("Title")
                        .HasColumnType("text");

                    b.Property<DateOnly>("To")
                        .HasColumnType("date");

                    b.HasKey("Id");

                    b.HasIndex("StudentId");

                    b.ToTable("Skill", (string)null);
                });

            modelBuilder.Entity("CareerMate.Models.Entities.StudentBatches.StudentBatch", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<string>("BatchCode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("BatchEndAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("BatchStartAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("LastAllowedDateForStartInternship")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("StudentBatch", (string)null);
                });

            modelBuilder.Entity("CareerMate.Models.Entities.Students.Student", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ApplicationUserId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("BatchId")
                        .HasColumnType("uuid");

                    b.Property<float>("CGPA")
                        .HasColumnType("real");

                    b.Property<byte[]>("CV")
                        .HasColumnType("bytea");

                    b.Property<Guid?>("CompanyId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("DegreeId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("InternshipId")
                        .HasColumnType("uuid");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("PersonalEmail")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("Status")
                        .HasColumnType("integer");

                    b.Property<Guid>("StudentId")
                        .HasColumnType("uuid");

                    b.Property<string>("StudentNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("UniversityEmail")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId")
                        .IsUnique();

                    b.HasIndex("BatchId");

                    b.HasIndex("CompanyId");

                    b.HasIndex("DegreeId");

                    b.HasIndex("InternshipId");

                    b.HasIndex("StudentId")
                        .IsUnique();

                    b.ToTable("Student", (string)null);
                });

            modelBuilder.Entity("CareerMate.Models.Entities.SysAdmins.SysAdmin", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ApplicationUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId")
                        .IsUnique();

                    b.ToTable("SysAdmin", (string)null);
                });

            modelBuilder.Entity("CareerMate.Models.Entities.Universities.University", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ShortName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("University", (string)null);
                });

            modelBuilder.Entity("CareerMate.Models.Test", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Test");
                });

            modelBuilder.Entity("InternshipPostStudent", b =>
                {
                    b.Property<Guid>("InternshipPostsId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("StudentsId")
                        .HasColumnType("uuid");

                    b.HasKey("InternshipPostsId", "StudentsId");

                    b.HasIndex("StudentsId");

                    b.ToTable("InternshipPostStudent");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("CareerMate.Models.Entities.Certifications.Certification", b =>
                {
                    b.HasOne("CareerMate.Models.Entities.Students.Student", "Student")
                        .WithMany("Certification")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Student");
                });

            modelBuilder.Entity("CareerMate.Models.Entities.Companies.Company", b =>
                {
                    b.HasOne("CareerMate.Models.Entities.Faculties.Faculty", "Faculty")
                        .WithMany("Companies")
                        .HasForeignKey("FacultyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Faculty");
                });

            modelBuilder.Entity("CareerMate.Models.Entities.Coordinators.Coordinator", b =>
                {
                    b.HasOne("CareerMate.Models.Entities.ApplicationUsers.ApplicationUser", "ApplicationUser")
                        .WithOne("Coordinator")
                        .HasForeignKey("CareerMate.Models.Entities.Coordinators.Coordinator", "ApplicationUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CareerMate.Models.Entities.Faculties.Faculty", "Faculty")
                        .WithMany("Coordinators")
                        .HasForeignKey("FacultyId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CareerMate.Models.Entities.StudentBatches.StudentBatch", "StudentBatch")
                        .WithMany("Coordinator")
                        .HasForeignKey("StudentBatchId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("ApplicationUser");

                    b.Navigation("Faculty");

                    b.Navigation("StudentBatch");
                });

            modelBuilder.Entity("CareerMate.Models.Entities.DailyDiaries.DailyDiary", b =>
                {
                    b.HasOne("CareerMate.Models.Entities.Students.Student", "Student")
                        .WithMany("Diary")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.OwnsOne("CareerMate.Models.Entities.DailyDiaries.CoordinatorApproval", "CoordinatorApproval", b1 =>
                        {
                            b1.Property<Guid>("DailyDiaryId")
                                .HasColumnType("uuid");

                            b1.Property<bool>("IsApproved")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("boolean")
                                .HasDefaultValue(false)
                                .HasColumnName("IsCoordinatorApproved");

                            b1.Property<DateTime?>("RequestedApprovalAt")
                                .HasColumnType("timestamp with time zone")
                                .HasColumnName("RequestedCoordinatorApprovalAt");

                            b1.HasKey("DailyDiaryId");

                            b1.ToTable("DailyDiary");

                            b1.WithOwner()
                                .HasForeignKey("DailyDiaryId");
                        });

                    b.OwnsOne("CareerMate.Models.Entities.DailyDiaries.InternshipPeriod", "InternshipPeriod", b1 =>
                        {
                            b1.Property<Guid>("DailyDiaryId")
                                .HasColumnType("uuid");

                            b1.Property<DateTime>("From")
                                .HasColumnType("timestamp with time zone")
                                .HasColumnName("InternshipPeriodFrom");

                            b1.Property<DateTime>("To")
                                .HasColumnType("timestamp with time zone")
                                .HasColumnName("InternshipPeriodTo");

                            b1.HasKey("DailyDiaryId");

                            b1.ToTable("DailyDiary");

                            b1.WithOwner()
                                .HasForeignKey("DailyDiaryId");
                        });

                    b.OwnsOne("CareerMate.Models.Entities.DailyDiaries.PeriodCovered", "PeriodCovered", b1 =>
                        {
                            b1.Property<Guid>("DailyDiaryId")
                                .HasColumnType("uuid");

                            b1.Property<DateTime>("From")
                                .HasColumnType("timestamp with time zone")
                                .HasColumnName("PeriodCoveredFrom");

                            b1.Property<DateTime>("To")
                                .HasColumnType("timestamp with time zone")
                                .HasColumnName("PeriodCoveredTo");

                            b1.HasKey("DailyDiaryId");

                            b1.ToTable("DailyDiary");

                            b1.WithOwner()
                                .HasForeignKey("DailyDiaryId");
                        });

                    b.OwnsOne("CareerMate.Models.Entities.DailyDiaries.SupervisorApproval", "SupervisorApproval", b1 =>
                        {
                            b1.Property<Guid>("DailyDiaryId")
                                .HasColumnType("uuid");

                            b1.Property<bool>("IsApproved")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("boolean")
                                .HasDefaultValue(false)
                                .HasColumnName("IsSupervisorApproved");

                            b1.Property<DateTime?>("RequestedApprovalAt")
                                .HasColumnType("timestamp with time zone")
                                .HasColumnName("RequestedSupervisorApprovalAt");

                            b1.HasKey("DailyDiaryId");

                            b1.ToTable("DailyDiary");

                            b1.WithOwner()
                                .HasForeignKey("DailyDiaryId");
                        });

                    b.Navigation("CoordinatorApproval")
                        .IsRequired();

                    b.Navigation("InternshipPeriod")
                        .IsRequired();

                    b.Navigation("PeriodCovered")
                        .IsRequired();

                    b.Navigation("Student");

                    b.Navigation("SupervisorApproval");
                });

            modelBuilder.Entity("CareerMate.Models.Entities.DailyRecords.DailyRecord", b =>
                {
                    b.HasOne("CareerMate.Models.Entities.DailyDiaries.DailyDiary", "Diary")
                        .WithMany("Records")
                        .HasForeignKey("DiaryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Diary");
                });

            modelBuilder.Entity("CareerMate.Models.Entities.Degrees.Degree", b =>
                {
                    b.HasOne("CareerMate.Models.Entities.Faculties.Faculty", "Faculty")
                        .WithMany("Degrees")
                        .HasForeignKey("FacultyId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Faculty");
                });

            modelBuilder.Entity("CareerMate.Models.Entities.Faculties.Faculty", b =>
                {
                    b.HasOne("CareerMate.Models.Entities.Universities.University", "University")
                        .WithMany("Faculty")
                        .HasForeignKey("UniversityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("University");
                });

            modelBuilder.Entity("CareerMate.Models.Entities.Industries.Industry", b =>
                {
                    b.HasOne("CareerMate.Models.Entities.Faculties.Faculty", "Faculty")
                        .WithMany("Industries")
                        .HasForeignKey("FacultyId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Faculty");
                });

            modelBuilder.Entity("CareerMate.Models.Entities.InternshipInvites.InternshipInvite", b =>
                {
                    b.HasOne("CareerMate.Models.Entities.Internships.Internship", "Internship")
                        .WithMany("InternshipInvites")
                        .HasForeignKey("InternshipId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CareerMate.Models.Entities.Students.Student", "Student")
                        .WithMany("InternshipInvites")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Internship");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("CareerMate.Models.Entities.InternshipPosts.InternshipPost", b =>
                {
                    b.HasOne("CareerMate.Models.Entities.ApplicationUsers.ApplicationUser", "CreatedApplicationUser")
                        .WithMany("InternshipPosts")
                        .HasForeignKey("CreatedApplicationUserId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CareerMate.Models.Entities.Internships.Internship", "Internship")
                        .WithOne("InternshipPost")
                        .HasForeignKey("CareerMate.Models.Entities.InternshipPosts.InternshipPost", "InternshipId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreatedApplicationUser");

                    b.Navigation("Internship");
                });

            modelBuilder.Entity("CareerMate.Models.Entities.Internships.Internship", b =>
                {
                    b.HasOne("CareerMate.Models.Entities.Companies.Company", "Company")
                        .WithMany("Internships")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");
                });

            modelBuilder.Entity("CareerMate.Models.Entities.Pathways.Pathway", b =>
                {
                    b.HasOne("CareerMate.Models.Entities.Degrees.Degree", "Degree")
                        .WithMany("Pathways")
                        .HasForeignKey("DegreeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Degree");
                });

            modelBuilder.Entity("CareerMate.Models.Entities.Skills.Skill", b =>
                {
                    b.HasOne("CareerMate.Models.Entities.Students.Student", "Student")
                        .WithMany("Skills")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Student");
                });

            modelBuilder.Entity("CareerMate.Models.Entities.Students.Student", b =>
                {
                    b.HasOne("CareerMate.Models.Entities.ApplicationUsers.ApplicationUser", "ApplicationUser")
                        .WithOne("Student")
                        .HasForeignKey("CareerMate.Models.Entities.Students.Student", "ApplicationUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CareerMate.Models.Entities.StudentBatches.StudentBatch", "Batch")
                        .WithMany("Students")
                        .HasForeignKey("BatchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CareerMate.Models.Entities.Companies.Company", "Company")
                        .WithMany("Students")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CareerMate.Models.Entities.Degrees.Degree", "Degree")
                        .WithMany("Students")
                        .HasForeignKey("DegreeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CareerMate.Models.Entities.Internships.Internship", "Internship")
                        .WithMany("Students")
                        .HasForeignKey("InternshipId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CareerMate.Models.Entities.CompanyLeaveRequests.CompanyLeaveRequest", "LeaveRequest")
                        .WithOne("Student")
                        .HasForeignKey("CareerMate.Models.Entities.Students.Student", "StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("CareerMate.Models.Entities.Students.CompanyFeedback", "CompanyFeedback", b1 =>
                        {
                            b1.Property<Guid>("StudentId")
                                .HasColumnType("uuid");

                            b1.Property<int?>("Level")
                                .HasColumnType("integer")
                                .HasColumnName("CompanyFeedbackLevel");

                            b1.Property<string>("Message")
                                .HasColumnType("text")
                                .HasColumnName("CompanyFeedbackMessage");

                            b1.HasKey("StudentId");

                            b1.ToTable("Student");

                            b1.WithOwner()
                                .HasForeignKey("StudentId");
                        });

                    b.OwnsOne("CareerMate.Models.Entities.Students.StudentMark", "Marks", b1 =>
                        {
                            b1.Property<Guid>("StudentId")
                                .HasColumnType("uuid");

                            b1.Property<int?>("DailyDiary")
                                .HasColumnType("integer")
                                .HasColumnName("DailyDiaryMarks");

                            b1.Property<int?>("Others")
                                .HasColumnType("integer")
                                .HasColumnName("OthersMarks");

                            b1.Property<int?>("Total")
                                .HasColumnType("integer")
                                .HasColumnName("TotalMarks");

                            b1.Property<int?>("Viva")
                                .HasColumnType("integer")
                                .HasColumnName("VivaMarks");

                            b1.HasKey("StudentId");

                            b1.ToTable("Student");

                            b1.WithOwner()
                                .HasForeignKey("StudentId");
                        });

                    b.Navigation("ApplicationUser");

                    b.Navigation("Batch");

                    b.Navigation("Company");

                    b.Navigation("CompanyFeedback")
                        .IsRequired();

                    b.Navigation("Degree");

                    b.Navigation("Internship");

                    b.Navigation("LeaveRequest");

                    b.Navigation("Marks")
                        .IsRequired();
                });

            modelBuilder.Entity("CareerMate.Models.Entities.SysAdmins.SysAdmin", b =>
                {
                    b.HasOne("CareerMate.Models.Entities.ApplicationUsers.ApplicationUser", "ApplicationUser")
                        .WithOne("SysAdmin")
                        .HasForeignKey("CareerMate.Models.Entities.SysAdmins.SysAdmin", "ApplicationUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationUser");
                });

            modelBuilder.Entity("InternshipPostStudent", b =>
                {
                    b.HasOne("CareerMate.Models.Entities.InternshipPosts.InternshipPost", null)
                        .WithMany()
                        .HasForeignKey("InternshipPostsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CareerMate.Models.Entities.Students.Student", null)
                        .WithMany()
                        .HasForeignKey("StudentsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("CareerMate.Models.Entities.ApplicationUsers.ApplicationUserRoles", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("CareerMate.Models.Entities.ApplicationUsers.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("CareerMate.Models.Entities.ApplicationUsers.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("CareerMate.Models.Entities.ApplicationUsers.ApplicationUserRoles", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CareerMate.Models.Entities.ApplicationUsers.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("CareerMate.Models.Entities.ApplicationUsers.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CareerMate.Models.Entities.ApplicationUsers.ApplicationUser", b =>
                {
                    b.Navigation("Coordinator");

                    b.Navigation("InternshipPosts");

                    b.Navigation("Student");

                    b.Navigation("SysAdmin");
                });

            modelBuilder.Entity("CareerMate.Models.Entities.Companies.Company", b =>
                {
                    b.Navigation("Internships");

                    b.Navigation("Students");
                });

            modelBuilder.Entity("CareerMate.Models.Entities.CompanyLeaveRequests.CompanyLeaveRequest", b =>
                {
                    b.Navigation("Student");
                });

            modelBuilder.Entity("CareerMate.Models.Entities.DailyDiaries.DailyDiary", b =>
                {
                    b.Navigation("Records");
                });

            modelBuilder.Entity("CareerMate.Models.Entities.Degrees.Degree", b =>
                {
                    b.Navigation("Pathways");

                    b.Navigation("Students");
                });

            modelBuilder.Entity("CareerMate.Models.Entities.Faculties.Faculty", b =>
                {
                    b.Navigation("Companies");

                    b.Navigation("Coordinators");

                    b.Navigation("Degrees");

                    b.Navigation("Industries");
                });

            modelBuilder.Entity("CareerMate.Models.Entities.Internships.Internship", b =>
                {
                    b.Navigation("InternshipInvites");

                    b.Navigation("InternshipPost");

                    b.Navigation("Students");
                });

            modelBuilder.Entity("CareerMate.Models.Entities.StudentBatches.StudentBatch", b =>
                {
                    b.Navigation("Coordinator");

                    b.Navigation("Students");
                });

            modelBuilder.Entity("CareerMate.Models.Entities.Students.Student", b =>
                {
                    b.Navigation("Certification");

                    b.Navigation("Diary");

                    b.Navigation("InternshipInvites");

                    b.Navigation("Skills");
                });

            modelBuilder.Entity("CareerMate.Models.Entities.Universities.University", b =>
                {
                    b.Navigation("Faculty");
                });
#pragma warning restore 612, 618
        }
    }
}
